import factoryStation, factoryOperation

class testOp2(factoryOperation.factoryOperation): 
  '''Test operation where all arguments to the subprocess are passed as options'''
  #  It also: 
  #      - creates it's own log to simulate a log created by the subprocess  
  #      - has a blocking / ready prompt
  # has it's own initialize() method to check existence of the command
  
  def __init__(self, factoryStation, options=None):  # This class specific stuff
    self.logName = 'test.log'
    self.logs = [ self.logName ]       # specify the list of lognames generated
    self.name = 'TestOp2'
    self.description = testOp2.__doc__
    self.readyPrompt = 'Hit any key to proceed'

# Stuff common to all factoryProcesses
    super(testOp2,self).__init__(factoryStation, options)

  def initialize(self):
    cmd = self.options['command']
    
    if not self.factoryStation.fileOnPath(cmd):
      self.printToLog('FATAL: Command %s not found on path' % cmd,0)
      return False
    
    self.args = [ cmd, self.options['option1'] ]
    return True
  
  def do(self):
    result = super(testOp2,self).do()     
    outputLog = open( self.logName, 'w')         # open a fake log
    outputLog.write( 'This is a log generated by ' + str(self.__class__) + '\n')
    outputLog.close()
    return result

 
if __name__ == "__main__":

  ''' Nominal case ------------------------------------------------------
     Provide no log file (prints to screen only)
     The subprocess and its arguments are passed as args 
     The subprocess creates a fake output log
     Uses a dummy serial number
     Operation is done (forcing an initialization the first time)
     Operation creates a fake output file
     Operation has a default blocking prompt 
     Logs are collected and stored in current directory with a default name
  '''
  fs = factoryStation.factoryStation()                          # default factoryStation object
  fo = testOp2( fs, { 'command' : 'ls', 'option1' : '-al'} )
  result = fo.do ()
  fo.collectLogs()
  fo.postResult(result)
