
Execution: python operator_ui.py [options]

See python operator_ui.py --help for options

Example:  python operator_ui.py -verbosity=5 --logpath "logs"  -x "factoryFlow.xml"

See examples/factoryFlow.xml

- If testMode is specified, errors are ignored and some processes 
  (esp the underlying operations) are NOT executed.

- If debugMode is specified, the user is presented with menu driven options which allow
individual factory operations to be exercised 

- In production, "nvpn" and "station" args would be set on the command line and thus the operator would only be 
presented with the minimal factory flow operations.

The output for each operator session will be:
 - one trace log file <timestamp.log> under the trace log path
 - a *.7z for each serial-operation under the same trace log path
 - the *.7z will contain:
 	- all logs generated by that operation
 	- a copy of the trace log at that point in the process


Scheme
============

factoryConfig.xml - a XML data structure specifying:
 - the factory flow (sequence of operations) for a list of products (NVPNs)
 - the stations associated with each NVPN
 - the operations and adjustable parameters for each station

Factory stations. 
Two factory stations are defined (RFCV and BBPV) which are subclasses of a general factoryStation.
A factoryStation is essentially a sequencer for a list of factoryOperations on a device.
   - during initialization, checks are made regarding required tools and environment etc       
   - the list of operations may be created individually and appended, or added en-mass from a dictionary 

Factory operations.
  These descend from a factoryOperation class which implements:
   - initialization checks
   - a wrapper for an underlying executable and/or python module
   - log collection and result presentation
   
  The operation may be controlled by two arguments:
    - an options dictionary (thus from XML / Jason etc) 
    - a reference to the factory station instance (thus the attributes of the factoryStation are available and modifyable)


Installation Notes
=======================
- (For windows) ANSI colors (see http://softkube.com/blog/ansi-command-line-colors-under-windows)
- need portions of "modules" subdirectory
- atcmd-itf(.exe) needs to be on the system PATH

BBPV specific:
- Copy in SmokeTest.smokeTst.py, pwOnOff.py modules
- Needs SDK installation (inc ICERA_ROOT and ICERA_LICENSE_KEY env vars)
- Needs PSU setup
- Needs BRINGUP_ICE9040_DDR_TAL.bat on the PATH
- Needs a gang image available as specified in the XML 
- Needs \integration_tools\flash_programmer\bin\flash_prog.py 
- Needs \interfacetest\bin\interfacetest.exe and configuration path \interfacetest\configuration

RFCV specific: 
- Copy in pwOnOff_visa.py module
- Need ical installed 
- Needs resice installed 
- Env var ICERA_RADIO_TESTER containing radio tester name and visa address like:
CMW_500-GPIB0::20::0::INSTR 

Finally, set ICERA_FACTORY_STATION environment variable to "BBPV" or "RFCV" or "CUSTOM" ...




